<?xml version="1.0" encoding="UTF-8"?>
<config xmlns="http://www.knime.org/2008/09/XMLConfig" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.knime.org/2008/09/XMLConfig http://www.knime.org/XMLConfig_2008_09.xsd" key="settings.xml">
<entry key="node_file" type="xstring" value="settings.xml"/>
<config key="flow_stack"/>
<config key="internal_node_subsettings">
<entry key="memory_policy" type="xstring" value="CacheSmallInMemory"/>
</config>
<config key="model">
<entry key="sourceCode" type="xstring" value="# Copy input to output%%00010output_table = input_table.copy()%%00010import pandas as pd%%00010from tqdm import tqdm%%00010import math%%00010df = pd.DataFrame(data=output_table)%%00010%%00010labels = []%%00010unknown_values = []%%00010drop_index = []%%00010%%00010for i in tqdm(range(len(df))):%%00010    %%00010    if df['activity_comment'][i] == &quot;Active&quot; or df['activity_comment'][i] == &quot;active&quot;:%%00010        labels.append('active')%%00010        continue%%00010        %%00010    if df['activity_comment'][i] == &quot;inactive&quot; or df['activity_comment'][i] == &quot;Not Active&quot; or df['activity_comment'][i] == &quot;Not Active (inhibition &lt; 50% 10 uM and thus dose-response curve not measured)&quot;:%%00010        labels.append('inactive')%%00010        continue%%00010    %%00010    if df['-log10(M) Values'][i] == -2:%%00010        labels.append('Log10(0) is not defined')%%00010        continue%%00010        %%00010    if df['-log10(M) Values'][i] &gt;= 5.5 and df['standard_relation'][i] in [&quot;&lt;&quot;, &quot;&lt;=&quot;, &quot;=&quot;, &quot;~&quot;]:%%00010        labels.append('active')%%00010        continue%%00010        %%00010    if df['-log10(M) Values'][i] &lt;=4.5 and df['standard_relation'][i] in [&quot;&gt;&quot;, &quot;&gt;=&quot;, &quot;=&quot;, &quot;~&quot;]:%%00010        labels.append('inactive')%%00010        continue%%00010    %%00010    if df['-log10(M) Values'][i] &gt; 4.5 and df['-log10(M) Values'][i] &lt; 5.5:%%00010        labels.append('indeterminate')%%00010        continue%%00010        %%00010    else:%%00010        unknown_values.append(i)%%00010        labels.append('Contradictory statements btw Log value and standard_relation')%%00010        continue%%00010%%00010df['Output'] = labels%%00010%%00010for i in tqdm(range(len(df))):%%00010    %%00010    if df['Output'][i] == &quot;Contradictory statements btw Log value and standard_relation&quot; or df['Output'][i] == &quot;Log10(0) is not defined&quot;:%%00010        drop_index.append(i)%%00010        continue%%00010%%00010df.reset_index(drop=True, inplace=True)%%00010df.drop(drop_index, axis=0,inplace=True)%%00010df.reset_index(drop=True, inplace=True)%%00010%%00010%%00010output_table = df%%00010"/>
<entry key="rowLimit" type="xint" value="2147483647"/>
<entry key="pythonVersionOption" type="xstring" value="python3"/>
<entry key="python2Command" type="xstring" value=""/>
<entry key="python3Command" type="xstring" value=""/>
<entry key="chunkSize" type="xint" value="500000"/>
<entry key="convertMissingToPython" type="xboolean" value="false"/>
<entry key="convertMissingFromPython" type="xboolean" value="false"/>
<entry key="sentinelOption" type="xstring" value="MIN_VAL"/>
<entry key="sentinelValue" type="xint" value="0"/>
</config>
<config key="nodeAnnotation">
<entry key="text" type="xstring" value="labelling"/>
<entry key="bgcolor" type="xint" value="16777215"/>
<entry key="x-coordinate" type="xint" value="428"/>
<entry key="y-coordinate" type="xint" value="139"/>
<entry key="width" type="xint" value="104"/>
<entry key="height" type="xint" value="13"/>
<entry key="alignment" type="xstring" value="CENTER"/>
<entry key="borderSize" type="xint" value="0"/>
<entry key="borderColor" type="xint" value="16777215"/>
<entry key="defFontSize" type="xint" value="11"/>
<entry key="annotation-version" type="xint" value="20151123"/>
<config key="styles"/>
</config>
<entry key="customDescription" type="xstring" isnull="true" value=""/>
<entry key="state" type="xstring" value="EXECUTED"/>
<entry key="factory" type="xstring" value="org.knime.python2.nodes.script.Python2ScriptNodeFactory"/>
<entry key="node-name" type="xstring" value="Python Script (1⇒1)"/>
<entry key="node-bundle-name" type="xstring" value="KNIME Python nodes"/>
<entry key="node-bundle-symbolic-name" type="xstring" value="org.knime.python2.nodes"/>
<entry key="node-bundle-vendor" type="xstring" value="KNIME AG, Zurich, Switzerland"/>
<entry key="node-bundle-version" type="xstring" value="4.0.0.v201906190741"/>
<entry key="node-feature-name" type="xstring" value="KNIME Python Integration"/>
<entry key="node-feature-symbolic-name" type="xstring" value="org.knime.features.python2.feature.group"/>
<entry key="node-feature-vendor" type="xstring" value="KNIME AG, Zurich, Switzerland"/>
<entry key="node-feature-version" type="xstring" value="4.0.0.v201906241606"/>
<config key="factory_settings"/>
<entry key="name" type="xstring" value="Python Script (1⇒1)"/>
<entry key="hasContent" type="xboolean" value="true"/>
<entry key="isInactive" type="xboolean" value="false"/>
<config key="ports">
<config key="port_1">
<entry key="index" type="xint" value="1"/>
<entry key="port_spec_class" type="xstring" value="org.knime.core.data.DataTableSpec"/>
<entry key="port_object_class" type="xstring" value="org.knime.core.node.BufferedDataTable"/>
<entry key="port_object_summary" type="xstring" value="Rows: 20087, Cols: 20"/>
<entry key="port_dir_location" type="xstring" value="port_1"/>
</config>
</config>
<config key="filestores">
<entry key="file_store_location" type="xstring" isnull="true" value=""/>
<entry key="file_store_id" type="xstring" value="acad8471-0b2e-470f-8a56-9b48651d7598"/>
</config>
</config>
